"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    writeMalformedDistributableFunctionMessage: ()=>writeMalformedDistributableFunctionMessage,
    distributeFunctionToNode: ()=>distributeFunctionToNode
});
const _domainsJs = require("../../utils/domains.js");
const _errorsJs = require("../../utils/errors.js");
const _genericsJs = require("../../utils/generics.js");
const _serializeJs = require("../../utils/serialize.js");
const writeMalformedDistributableFunctionMessage = (def)=>`Expected a Function or Record<Domain, Function> operand (${(0, _serializeJs.stringify)(def)} was invalid)`;
const distributeFunctionToNode = (distributableFunction, node, ctx, ruleKey)=>{
    const domains = (0, _genericsJs.objectKeysOf)(node);
    if (!(0, _domainsJs.hasDomain)(distributableFunction, "object")) {
        return (0, _errorsJs.throwParseError)(writeMalformedDistributableFunctionMessage(distributableFunction));
    }
    const distributed = {};
    if (typeof distributableFunction === "function") {
        const domainFunction = {
            [ruleKey]: distributableFunction
        };
        for (const domain of domains){
            distributed[domain] = domainFunction;
        }
    } else {
        for (const domain of domains){
            if (distributableFunction[domain] === undefined) {
                continue;
            }
            const functionInDomain = {
                [ruleKey]: distributableFunction[domain]
            };
            if (typeof functionInDomain[ruleKey] !== "function") {
                return (0, _errorsJs.throwParseError)(writeMalformedDistributableFunctionMessage(functionInDomain));
            }
            distributed[domain] = functionInDomain;
        }
    }
    return distributed;
};
