"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    parseMorphTuple: ()=>parseMorphTuple,
    writeMalformedMorphExpressionMessage: ()=>writeMalformedMorphExpressionMessage
});
const _branchJs = require("../../nodes/branch.js");
const _errorsJs = require("../../utils/errors.js");
const _objectKindsJs = require("../../utils/objectKinds.js");
const _serializeJs = require("../../utils/serialize.js");
const _definitionJs = require("../definition.js");
const parseMorphTuple = (def, ctx)=>{
    if (typeof def[2] !== "function") {
        return (0, _errorsJs.throwParseError)(writeMalformedMorphExpressionMessage(def[2]));
    }
    const node = (0, _definitionJs.parseDefinition)(def[0], ctx);
    const resolution = ctx.type.scope.resolveTypeNode(node);
    const morph = def[2];
    ctx.type.includesMorph = true;
    let domain;
    const result = {};
    for(domain in resolution){
        const predicate = resolution[domain];
        if (predicate === true) {
            result[domain] = {
                rules: {},
                morph
            };
        } else if (typeof predicate === "object") {
            result[domain] = (0, _objectKindsJs.isArray)(predicate) ? predicate.map((branch)=>applyMorph(branch, morph)) : applyMorph(predicate, morph);
        } else {
            (0, _errorsJs.throwInternalError)(`Unexpected predicate value for domain '${domain}': ${(0, _serializeJs.stringify)(predicate)}`);
        }
    }
    return result;
};
const applyMorph = (branch, morph)=>(0, _branchJs.isTransformationBranch)(branch) ? {
        ...branch,
        morph: branch.morph ? Array.isArray(branch.morph) ? [
            ...branch.morph,
            morph
        ] : [
            branch.morph,
            morph
        ] : morph
    } : {
        rules: branch,
        morph
    };
const writeMalformedMorphExpressionMessage = (value)=>`Morph expression requires a function following '|>' (was ${typeof value})`;
