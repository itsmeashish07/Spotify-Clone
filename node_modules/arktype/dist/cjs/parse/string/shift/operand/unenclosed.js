"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    parseUnenclosed: ()=>parseUnenclosed,
    writeUnresolvableMessage: ()=>writeUnresolvableMessage,
    writeMissingOperandMessage: ()=>writeMissingOperandMessage,
    writeMissingRightOperandMessage: ()=>writeMissingRightOperandMessage,
    writeExpressionExpectedMessage: ()=>writeExpressionExpectedMessage
});
const _numericLiteralsJs = require("../../../../utils/numericLiterals.js");
const parseUnenclosed = (s)=>{
    const token = s.scanner.shiftUntilNextTerminator();
    s.setRoot(unenclosedToNode(s, token));
};
const unenclosedToNode = (s, token)=>{
    if (s.ctx.type.scope.addParsedReferenceIfResolvable(token, s.ctx)) {
        return token;
    }
    return maybeParseUnenclosedLiteral(token) ?? s.error(token === "" ? writeMissingOperandMessage(s) : writeUnresolvableMessage(token));
};
const maybeParseUnenclosedLiteral = (token)=>{
    const maybeNumber = (0, _numericLiteralsJs.tryParseWellFormedNumber)(token);
    if (maybeNumber !== undefined) {
        return {
            number: {
                value: maybeNumber
            }
        };
    }
    const maybeBigint = (0, _numericLiteralsJs.tryParseWellFormedBigint)(token);
    if (maybeBigint !== undefined) {
        return {
            bigint: {
                value: maybeBigint
            }
        };
    }
};
const writeUnresolvableMessage = (token)=>`'${token}' is unresolvable`;
const writeMissingOperandMessage = (s)=>{
    const operator = s.previousOperator();
    return operator ? writeMissingRightOperandMessage(operator, s.scanner.unscanned) : writeExpressionExpectedMessage(s.scanner.unscanned);
};
const writeMissingRightOperandMessage = (token, unscanned)=>`Token '${token}' requires a right operand${unscanned ? ` before '${unscanned}'` : ""}`;
const writeExpressionExpectedMessage = (unscanned)=>`Expected an expression${unscanned ? ` before '${unscanned}'` : ""}`;
