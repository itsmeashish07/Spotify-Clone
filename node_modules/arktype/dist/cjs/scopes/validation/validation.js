"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    validationScope: ()=>validationScope,
    validation: ()=>validation
});
const _numericLiteralsJs = require("../../utils/numericLiterals.js");
const _scopeJs = require("../scope.js");
const _tsKeywordsJs = require("../tsKeywords.js");
const _creditCardJs = require("./creditCard.js");
const _dateJs = require("./date.js");
// Non-trivial expressions should have an explanation or attribution
const parsedNumber = (0, _scopeJs.rootType)([
    _numericLiteralsJs.wellFormedNumberMatcher,
    "|>",
    (s)=>parseFloat(s)
], {
    mustBe: "a well-formed numeric string"
});
const parsedInteger = (0, _scopeJs.rootType)([
    _tsKeywordsJs.tsKeywords.string,
    "|>",
    (s, problems)=>{
        if (!(0, _numericLiteralsJs.isWellFormedInteger)(s)) {
            return problems.mustBe("a well-formed integer string");
        }
        const parsed = parseInt(s);
        return Number.isSafeInteger(parsed) ? parsed : problems.mustBe("an integer in the range Number.MIN_SAFE_INTEGER to Number.MAX_SAFE_INTEGER");
    }
]);
// https://www.regular-expressions.info/email.html
const email = (0, _scopeJs.rootType)(/^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$/, {
    mustBe: "a valid email"
});
// https://github.com/validatorjs/validator.js/blob/master/src/lib/isUUID.js
const uuid = (0, _scopeJs.rootType)(/^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}$/, {
    mustBe: "a valid UUID"
});
// https://semver.org/
const semver = (0, _scopeJs.rootType)(/^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/, {
    mustBe: "a valid semantic version (see https://semver.org/)"
});
const json = (0, _scopeJs.rootType)([
    _tsKeywordsJs.tsKeywords.string,
    "|>",
    (s)=>JSON.parse(s)
], {
    mustBe: "a JSON-parsable string"
});
const validationScope = (0, _scopeJs.scope)({
    // Character sets
    alpha: [
        /^[A-Za-z]*$/,
        ":",
        {
            mustBe: "only letters"
        }
    ],
    alphanumeric: [
        /^[A-Za-z\d]*$/,
        ":",
        {
            mustBe: "only letters and digits"
        }
    ],
    lowercase: [
        /^[a-z]*$/,
        ":",
        {
            mustBe: "only lowercase letters"
        }
    ],
    uppercase: [
        /^[A-Z]*$/,
        ":",
        {
            mustBe: "only uppercase letters"
        }
    ],
    creditCard: _creditCardJs.creditCard,
    email,
    uuid,
    parsedNumber,
    parsedInteger,
    parsedDate: _dateJs.parsedDate,
    semver,
    json,
    integer: [
        "node",
        {
            number: {
                divisor: 1
            }
        }
    ]
}, {
    name: "validation",
    standard: false
});
const validation = validationScope.compile();
