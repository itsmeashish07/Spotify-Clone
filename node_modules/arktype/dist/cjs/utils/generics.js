"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    asConst: ()=>asConst,
    isKeyOf: ()=>isKeyOf,
    entriesOf: ()=>entriesOf,
    objectKeysOf: ()=>objectKeysOf,
    prototypeKeysOf: ()=>prototypeKeysOf,
    hasKey: ()=>hasKey,
    hasSingleKey: ()=>hasSingleKey,
    keyCount: ()=>keyCount,
    hasKeys: ()=>hasKeys,
    nominal: ()=>nominal,
    getNominalId: ()=>getNominalId,
    hasNominalId: ()=>hasNominalId,
    listFrom: ()=>listFrom
});
const _domainsJs = require("./domains.js");
const asConst = (t)=>t;
const isKeyOf = (k, obj)=>k in obj;
const entriesOf = (o)=>Object.entries(o);
const objectKeysOf = (o)=>Object.keys(o);
const prototypeKeysOf = (value)=>{
    const result = [];
    while(value !== Object.prototype && value !== null && value !== undefined){
        for (const k of Object.getOwnPropertyNames(value)){
            if (!result.includes(k)) {
                result.push(k);
            }
        }
        for (const symbol of Object.getOwnPropertySymbols(value)){
            if (!result.includes(symbol)) {
                result.push(symbol);
            }
        }
        value = Object.getPrototypeOf(value);
    }
    return result;
};
const hasKey = (o, k)=>{
    const valueAtKey = o?.[k];
    return valueAtKey !== undefined && valueAtKey !== null;
};
const hasSingleKey = (o, k)=>k in o && Object.keys(o).length === 1;
const keyCount = (o)=>Object.keys(o).length;
const hasKeys = (value)=>(0, _domainsJs.hasDomain)(value, "object") ? Object.keys(value).length !== 0 : false;
const id = Symbol("id");
const nominal = (o, name)=>Object.assign(o, {
        [id]: name
    });
const getNominalId = (data)=>(0, _domainsJs.hasDomain)(data, "object") && id in data ? data[id] : undefined;
const hasNominalId = (data, name)=>getNominalId(data) === name;
const listFrom = (data)=>Array.isArray(data) ? data : [
        data
    ];
