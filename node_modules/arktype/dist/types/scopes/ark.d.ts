import type { Out } from "../parse/ast/morph.js";
import type { Space } from "./scope.js";
import type { TypeParser } from "./type.js";
export declare const arkScope: import("./scope.js").Scope<[{
    any: any;
    bigint: bigint;
    boolean: boolean;
    false: false;
    never: never;
    null: null;
    number: number;
    object: object;
    string: string;
    symbol: symbol;
    true: true;
    unknown: unknown;
    void: void;
    undefined: undefined;
    Function: (...args: any[]) => unknown;
    Date: Date;
    Error: Error;
    Map: Map<unknown, unknown>;
    RegExp: RegExp;
    Set: Set<unknown>;
    WeakMap: WeakMap<object, unknown>;
    WeakSet: WeakSet<object>;
    Promise: Promise<unknown>;
    alpha: string;
    alphanumeric: string;
    lowercase: string;
    uppercase: string;
    creditCard: string;
    email: string;
    uuid: string;
    parsedNumber: (In: string) => Out<number>;
    parsedInteger: (In: string) => Out<number>;
    parsedDate: (In: string) => Out<Date>;
    semver: string;
    json: (In: string) => Out<unknown>;
    integer: number;
}, {}, false]>;
export declare const ark: Space<PrecompiledDefaults>;
export declare const scopes: {
    root: import("./scope.js").Scope<[{}, {}, false]>;
    tsKeywords: import("./scope.js").Scope<[{
        any: any;
        bigint: bigint;
        boolean: boolean;
        false: false;
        never: never;
        null: null;
        number: number;
        object: object;
        string: string;
        symbol: symbol;
        true: true;
        unknown: unknown;
        void: void;
        undefined: undefined;
    }, {}, false]>;
    jsObjects: import("./scope.js").Scope<[{
        Function: (...args: any[]) => unknown;
        Date: Date;
        Error: Error;
        Map: Map<unknown, unknown>;
        RegExp: RegExp;
        Set: Set<unknown>;
        WeakMap: WeakMap<object, unknown>;
        WeakSet: WeakSet<object>;
        Promise: Promise<unknown>;
    }, {}, false]>;
    validation: import("./scope.js").Scope<[{
        alpha: string;
        alphanumeric: string;
        lowercase: string;
        uppercase: string;
        creditCard: string;
        email: string;
        uuid: string;
        parsedNumber: (In: string) => Out<number>;
        parsedInteger: (In: string) => Out<number>;
        parsedDate: (In: string) => Out<Date>;
        semver: string;
        json: (In: string) => Out<unknown>;
        integer: number;
    }, {}, false]>;
    ark: import("./scope.js").Scope<[{
        any: any;
        bigint: bigint;
        boolean: boolean;
        false: false;
        never: never;
        null: null;
        number: number;
        object: object;
        string: string;
        symbol: symbol;
        true: true;
        unknown: unknown;
        void: void;
        undefined: undefined;
        Function: (...args: any[]) => unknown;
        Date: Date;
        Error: Error;
        Map: Map<unknown, unknown>;
        RegExp: RegExp;
        Set: Set<unknown>;
        WeakMap: WeakMap<object, unknown>;
        WeakSet: WeakSet<object>;
        Promise: Promise<unknown>;
        alpha: string;
        alphanumeric: string;
        lowercase: string;
        uppercase: string;
        creditCard: string;
        email: string;
        uuid: string;
        parsedNumber: (In: string) => Out<number>;
        parsedInteger: (In: string) => Out<number>;
        parsedDate: (In: string) => Out<Date>;
        semver: string;
        json: (In: string) => Out<unknown>;
        integer: number;
    }, {}, false]>;
};
export declare const spaces: {
    tsKeywords: Space<{
        any: any;
        bigint: bigint;
        boolean: boolean;
        false: false;
        never: never;
        null: null;
        number: number;
        object: object;
        string: string;
        symbol: symbol;
        true: true;
        unknown: unknown;
        void: void;
        undefined: undefined;
    }>;
    jsObjects: Space<{
        Function: (...args: any[]) => unknown;
        Date: Date;
        Error: Error;
        Map: Map<unknown, unknown>;
        RegExp: RegExp;
        Set: Set<unknown>;
        WeakMap: WeakMap<object, unknown>;
        WeakSet: WeakSet<object>;
        Promise: Promise<unknown>;
    }>;
    validation: Space<{
        alpha: string;
        alphanumeric: string;
        lowercase: string;
        uppercase: string;
        creditCard: string;
        email: string;
        uuid: string;
        parsedNumber: (In: string) => Out<number>;
        parsedInteger: (In: string) => Out<number>;
        parsedDate: (In: string) => Out<Date>;
        semver: string;
        json: (In: string) => Out<unknown>;
        integer: number;
    }>;
    ark: Space<PrecompiledDefaults>;
};
export type PrecompiledDefaults = {
    any: any;
    bigint: bigint;
    boolean: boolean;
    false: false;
    never: never;
    null: null;
    number: number;
    object: object;
    string: string;
    symbol: symbol;
    true: true;
    unknown: unknown;
    void: void;
    undefined: undefined;
    integer: number;
    alpha: string;
    alphanumeric: string;
    lowercase: string;
    uppercase: string;
    creditCard: string;
    email: string;
    uuid: string;
    semver: string;
    json: (In: string) => Out<unknown>;
    parsedNumber: (In: string) => Out<number>;
    parsedInteger: (In: string) => Out<number>;
    parsedDate: (In: string) => Out<Date>;
    Function: (...args: any[]) => unknown;
    Date: Date;
    Error: Error;
    Map: Map<unknown, unknown>;
    RegExp: RegExp;
    Set: Set<unknown>;
    WeakMap: WeakMap<object, unknown>;
    WeakSet: WeakSet<object>;
    Promise: Promise<unknown>;
};
export declare const type: TypeParser<PrecompiledDefaults>;
