/**
 * @keywords keywords: {
        "alpha": "only letters",
        "alphanumeric": "only letters and digits",
        "lowercase": "only lowercase letters",
        "uppercase": "only uppercase letters",
        "creditCard": "a valid credit card number",
        "email": "a valid email",
        "uuid": "a valid UUID",
        "parsedNumber": "a well-formed numeric string",
        "parsedInteger": "a well-formed integer string",
        "parsedDate": "a valid date",
        "semver": "a valid semantic version",
        "json": "a JSON-parsable string",
        "integer": "an integer"
}
 * @docgenScope
 * @docgenTable
 */
export declare const validationScope: import("../scope.js").Scope<[{
    alpha: string;
    alphanumeric: string;
    lowercase: string;
    uppercase: string;
    creditCard: string;
    email: string;
    uuid: string;
    parsedNumber: (In: string) => import("../../parse/ast/morph.js").Out<number>;
    parsedInteger: (In: string) => import("../../parse/ast/morph.js").Out<number>;
    parsedDate: (In: string) => import("../../parse/ast/morph.js").Out<Date>;
    semver: string;
    json: (In: string) => import("../../parse/ast/morph.js").Out<unknown>;
    integer: number;
}, {}, false]>;
export declare const validation: import("../scope.js").Space<{
    alpha: string;
    alphanumeric: string;
    lowercase: string;
    uppercase: string;
    creditCard: string;
    email: string;
    uuid: string;
    parsedNumber: (In: string) => import("../../parse/ast/morph.js").Out<number>;
    parsedInteger: (In: string) => import("../../parse/ast/morph.js").Out<number>;
    parsedDate: (In: string) => import("../../parse/ast/morph.js").Out<Date>;
    semver: string;
    json: (In: string) => import("../../parse/ast/morph.js").Out<unknown>;
    integer: number;
}>;
