type DayDelimiter = "." | "/" | "-";
type DayPart = DayPatterns[PartKey];
type PartKey = keyof DayPatterns;
type DayPatterns = {
    y: "yy" | "yyyy";
    m: "mm" | "m";
    d: "dd" | "d";
};
type fragment<part extends DayPart, delimiter extends DayDelimiter> = `${delimiter}${part}` | "";
export type DayPattern<delimiter extends DayDelimiter = DayDelimiter> = {
    [d in delimiter]: {
        [k1 in keyof DayPatterns]: {
            [k2 in Exclude<keyof DayPatterns, k1>]: `${DayPatterns[k1]}${fragment<DayPatterns[k2], d>}${fragment<DayPatterns[Exclude<keyof DayPatterns, k1 | k2>], d>}`;
        }[Exclude<keyof DayPatterns, k1>];
    }[keyof DayPatterns];
}[delimiter];
export type DateFormat = "iso8601" | DayPattern;
export type DateOptions = {
    format?: DateFormat;
};
export declare const tryParseDate: (data: string, opts?: DateOptions) => Date | string;
export declare const parsedDate: import("../type.js").Type<(In: string) => import("../../parse/ast/morph.js").Out<Date>>;
export {};
