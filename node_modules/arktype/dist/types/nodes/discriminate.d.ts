import type { Domain } from "../utils/domains.js";
import type { evaluate } from "../utils/generics.js";
import type { DefaultObjectKind } from "../utils/objectKinds.js";
import { Path } from "../utils/paths.js";
import type { SerializedPrimitive } from "../utils/serialize.js";
import type { Branches } from "./branch.js";
import type { FlattenContext, TraversalEntry, TraversalValue } from "./node.js";
export type DiscriminatedSwitch<kind extends DiscriminantKind = DiscriminantKind> = {
    readonly path: Path;
    readonly kind: kind;
    readonly cases: DiscriminatedCases<kind>;
};
export type DiscriminatedCases<kind extends DiscriminantKind = DiscriminantKind> = {
    [caseKey in CaseKey<kind>]?: TraversalEntry[];
};
export type CaseKey<kind extends DiscriminantKind = DiscriminantKind> = DiscriminantKind extends kind ? string : DiscriminantKinds[kind] | "default";
export declare const flattenBranches: (branches: Branches, ctx: FlattenContext) => TraversalEntry[];
export type QualifiedDisjoint = `${DiscriminantKind}` | `${string}/${DiscriminantKind}`;
export type DiscriminantKinds = {
    domain: Domain;
    class: DefaultObjectKind;
    value: SerializedPrimitive;
};
export type DiscriminantKind = evaluate<keyof DiscriminantKinds>;
export declare const serializeDefinitionIfAllowed: <kind extends DiscriminantKind>(kind: kind, definition: TraversalValue<kind>) => string | undefined;
export declare const serializeCase: <kind extends DiscriminantKind>(kind: kind, data: unknown) => "default" | DiscriminantKinds[kind];
