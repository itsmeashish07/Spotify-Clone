import type { Scanner } from "../../parse/string/shift/scanner.js";
import type { EntryChecker } from "../../traverse/traverse.js";
import type { evaluate } from "../../utils/generics.js";
import type { FlattenAndPushRule } from "./rules.js";
export type Range = DoubleBound | Bound<"==">;
export type DoubleBound = {
    min?: LowerBound;
    max?: UpperBound;
};
export type BoundKind = evaluate<keyof DoubleBound>;
export declare const minComparators: {
    readonly ">": true;
    readonly ">=": true;
};
export type MinComparator = keyof typeof minComparators;
export type LowerBound = Bound<MinComparator>;
export declare const maxComparators: {
    readonly "<": true;
    readonly "<=": true;
};
export type MaxComparator = keyof typeof maxComparators;
export type UpperBound = Bound<MaxComparator>;
export type Bound<comparator extends Scanner.Comparator = Scanner.Comparator> = {
    readonly comparator: comparator;
    readonly limit: number;
};
export declare const isEqualityRange: (range: Range) => range is Bound<"==">;
export declare const rangeIntersection: import("../compose.js").Intersector<Range | undefined>;
export type FlatBound = evaluate<Bound & {
    units?: string;
}>;
export declare const flattenRange: FlattenAndPushRule<Range>;
export declare const checkBound: EntryChecker<"bound">;
export declare const compareStrictness: (kind: "min" | "max", l: Bound | undefined, r: Bound | undefined) => "=" | "r" | "l";
