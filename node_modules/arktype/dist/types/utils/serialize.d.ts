import type { inferDomain, Primitive } from "./domains.js";
import type { isTopType, List } from "./generics.js";
import type { BigintLiteral, NumberLiteral } from "./numericLiterals.js";
export type SerializationOptions = {
    onCycle?: (value: object) => string;
    onSymbol?: (value: symbol) => string;
    onFunction?: (value: Function) => string;
};
export declare const snapshot: <t>(data: t, opts?: SerializationOptions) => snapshot<t, []>;
export type snapshot<t, depth extends 1[] = []> = isTopType<t> extends true ? unknown : t extends Primitive ? snapshotPrimitive<t> : t extends Function ? `(function${string})` : depth["length"] extends 10 ? unknown : t extends List<infer item> ? List<snapshot<item, [...depth, 1]>> : {
    [k in keyof t]: snapshot<t[k], [...depth, 1]>;
};
type snapshotPrimitive<t> = t extends undefined ? "(undefined)" : t extends bigint ? `${t}n` : t extends symbol ? `(symbol${string})` : t;
export declare const stringify: (data: unknown, indent?: number) => string;
type SerializedString = `'${string}'`;
export type SerializedPrimitives = {
    string: SerializedString;
    number: NumberLiteral;
    bigint: BigintLiteral;
    boolean: "true" | "false";
    null: "null";
    undefined: "undefined";
};
export type SerializedPrimitive = SerializedPrimitives[keyof SerializedPrimitives];
export type SerializablePrimitive = inferDomain<keyof SerializedPrimitives>;
export declare const serializePrimitive: <value extends string | number | bigint | boolean | null | undefined>(value: value) => serializePrimitive<value>;
export type serializePrimitive<value extends SerializablePrimitive> = value extends string ? `'${value}'` : value extends bigint ? `${value}n` : `${value}`;
export declare const deserializePrimitive: <serialized extends SerializedPrimitive>(serialized: serialized) => deserializePrimitive<serialized>;
export type deserializePrimitive<serialized extends SerializedPrimitive> = serialized extends keyof SerializedKeywords ? SerializedKeywords[serialized] : serialized extends SerializedString ? string : serialized extends BigintLiteral ? bigint : number;
declare const serializedKeywords: {
    readonly true: true;
    readonly false: false;
    readonly undefined: undefined;
    readonly null: null;
};
type SerializedKeywords = typeof serializedKeywords;
export {};
