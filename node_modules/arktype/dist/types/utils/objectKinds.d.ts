import type { constructor, instanceOf, isTopType } from "./generics.js";
export declare const defaultObjectKinds: {
    readonly Array: ArrayConstructor;
    readonly Date: DateConstructor;
    readonly Error: ErrorConstructor;
    readonly Function: FunctionConstructor;
    readonly Map: MapConstructor;
    readonly RegExp: RegExpConstructor;
    readonly Set: SetConstructor;
    readonly Object: ObjectConstructor;
    readonly String: StringConstructor;
    readonly Number: NumberConstructor;
    readonly Boolean: BooleanConstructor;
    readonly WeakMap: WeakMapConstructor;
    readonly WeakSet: WeakSetConstructor;
    readonly Promise: PromiseConstructor;
};
export type InferredObjectKinds = {
    [kind in DefaultObjectKind]: inferObjectKind<kind>;
};
export type inferObjectKind<kind extends keyof kinds, kinds extends ObjectKindSet = DefaultObjectKindSet> = kind extends "Function" ? (...args: any[]) => unknown : kind extends "Object" ? Record<string, unknown> : instanceOf<kinds[kind]>;
export type BuiltinClassName = Exclude<DefaultObjectKind, "Object" | "Function" | "Array">;
type BuiltinClassesByName = {
    [kind in BuiltinClassName]: instanceOf<DefaultObjectKindSet[kind]>;
};
export type BuiltinClass = BuiltinClassesByName[BuiltinClassName];
export type ObjectKindSet = Record<string, constructor>;
export type DefaultObjectKindSet = typeof defaultObjectKinds;
export type DefaultObjectKind = keyof DefaultObjectKindSet;
export type objectKindOf<data, kinds extends ObjectKindSet = DefaultObjectKindSet> = isTopType<data> extends true ? undefined | keyof kinds : data extends object ? object extends data ? keyof kinds : {
    [kind in keyof kinds]: kinds[kind] extends constructor<data> ? kind : data extends (...args: any[]) => unknown ? "Function" : "Object";
}[keyof kinds] : undefined;
export declare const objectKindOf: <data, kinds extends ObjectKindSet = {
    readonly Array: ArrayConstructor;
    readonly Date: DateConstructor;
    readonly Error: ErrorConstructor;
    readonly Function: FunctionConstructor;
    readonly Map: MapConstructor;
    readonly RegExp: RegExpConstructor;
    readonly Set: SetConstructor;
    readonly Object: ObjectConstructor;
    readonly String: StringConstructor;
    readonly Number: NumberConstructor;
    readonly Boolean: BooleanConstructor;
    readonly WeakMap: WeakMapConstructor;
    readonly WeakSet: WeakSetConstructor;
    readonly Promise: PromiseConstructor;
}>(data: data, kinds?: kinds | undefined) => objectKindOf<data, kinds> | undefined;
export declare const hasObjectKind: <kind extends keyof kinds, kinds extends ObjectKindSet = {
    readonly Array: ArrayConstructor;
    readonly Date: DateConstructor;
    readonly Error: ErrorConstructor;
    readonly Function: FunctionConstructor;
    readonly Map: MapConstructor;
    readonly RegExp: RegExpConstructor;
    readonly Set: SetConstructor;
    readonly Object: ObjectConstructor;
    readonly String: StringConstructor;
    readonly Number: NumberConstructor;
    readonly Boolean: BooleanConstructor;
    readonly WeakMap: WeakMapConstructor;
    readonly WeakSet: WeakSetConstructor;
    readonly Promise: PromiseConstructor;
}>(data: unknown, kind: kind, kinds?: kinds | undefined) => data is inferObjectKind<kind, kinds>;
export declare const isArray: <data>(data: data) => data is Extract<data, readonly unknown[]>;
/** Each defaultObjectKind's completion for the phrase "Must be _____" */
export declare const objectKindDescriptions: {
    readonly Object: "an object";
    readonly Array: "an array";
    readonly Function: "a function";
    readonly Date: "a Date";
    readonly RegExp: "a RegExp";
    readonly Error: "an Error";
    readonly Map: "a Map";
    readonly Set: "a Set";
    readonly String: "a String object";
    readonly Number: "a Number object";
    readonly Boolean: "a Boolean object";
    readonly Promise: "a Promise";
    readonly WeakMap: "a WeakMap";
    readonly WeakSet: "a WeakSet";
};
export declare const getExactConstructorObjectKind: (constructor: unknown) => DefaultObjectKind | undefined;
export {};
