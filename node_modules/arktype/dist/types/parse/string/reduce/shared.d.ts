import type { MinComparator } from "../../../nodes/rules/range.js";
import type { NumberLiteral } from "../../../utils/numericLiterals.js";
import { Scanner } from "../shift/scanner.js";
export declare const writeUnmatchedGroupCloseMessage: <unscanned extends string>(unscanned: unscanned) => `Unmatched )${unscanned extends "" ? "" : ` before ${unscanned}`}`;
export type writeUnmatchedGroupCloseMessage<unscanned extends string> = `Unmatched )${unscanned extends "" ? "" : ` before ${unscanned}`}`;
export declare const unclosedGroupMessage = "Missing )";
export type unclosedGroupMessage = typeof unclosedGroupMessage;
export declare const writeOpenRangeMessage: <min extends `${number}`, comparator extends ">" | ">=">(min: min, comparator: comparator) => `Left bounds are only valid when paired with right bounds (try ...${comparator}${min})`;
export type writeOpenRangeMessage<min extends NumberLiteral, comparator extends MinComparator> = `Left bounds are only valid when paired with right bounds (try ...${comparator}${min})`;
export type writeUnpairableComparatorMessage<comparator extends Scanner.Comparator> = `Left-bounded expressions must specify their limits using < or <= (was ${comparator})`;
export declare const writeUnpairableComparatorMessage: <comparator extends ">" | "<" | ">=" | "<=" | "==">(comparator: comparator) => `Left-bounded expressions must specify their limits using < or <= (was ${comparator})`;
export declare const writeMultipleLeftBoundsMessage: <openLimit extends `${number}`, openComparator extends ">" | ">=", limit extends `${number}`, comparator extends ">" | ">=">(openLimit: openLimit, openComparator: openComparator, limit: limit, comparator: comparator) => `An expression may have at most one left bound (parsed ${openLimit}${{
    readonly "<": ">";
    readonly ">": "<";
    readonly "<=": ">=";
    readonly ">=": "<=";
    readonly "==": "==";
}[openComparator]}, ${limit}${{
    readonly "<": ">";
    readonly ">": "<";
    readonly "<=": ">=";
    readonly ">=": "<=";
    readonly "==": "==";
}[comparator]})`;
export type writeMultipleLeftBoundsMessage<openLimit extends NumberLiteral, openComparator extends MinComparator, limit extends NumberLiteral, comparator extends MinComparator> = `An expression may have at most one left bound (parsed ${openLimit}${Scanner.InvertedComparators[openComparator]}, ${limit}${Scanner.InvertedComparators[comparator]})`;
