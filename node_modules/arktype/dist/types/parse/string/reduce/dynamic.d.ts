import type { Node } from "../../../nodes/node.js";
import type { LowerBound } from "../../../nodes/rules/range.js";
import type { ParseContext } from "../../definition.js";
import { Scanner } from "../shift/scanner.js";
export declare class DynamicState {
    readonly ctx: ParseContext;
    readonly scanner: Scanner;
    private root;
    private branches;
    private groups;
    constructor(def: string, ctx: ParseContext);
    error(message: string): never;
    hasRoot(): boolean;
    resolveRoot(): import("../../../nodes/node.js").TypeNode;
    rootToString(): string;
    ejectRootIfLimit(): number | undefined;
    ejectRangeIfOpen(): LowerBound | undefined;
    private assertHasRoot;
    private assertUnsetRoot;
    setRoot(node: Node): void;
    rootToArray(): void;
    intersect(node: Node): void;
    private ejectRoot;
    ejectFinalizedRoot(): Node;
    finalize(): undefined;
    reduceLeftBound(limit: number, comparator: Scanner.Comparator): undefined;
    finalizeBranches(): void;
    finalizeGroup(): undefined;
    pushRootToBranch(token: Scanner.BranchToken): void;
    private assertRangeUnset;
    reduceGroupOpen(): void;
    previousOperator(): "|" | "&" | undefined;
    shiftedByOne(): this;
}
