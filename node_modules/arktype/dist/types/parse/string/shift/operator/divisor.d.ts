import type { error } from "../../../../utils/generics.js";
import { tryParseWellFormedInteger } from "../../../../utils/numericLiterals.js";
import type { DynamicState } from "../../reduce/dynamic.js";
import type { state, StaticState } from "../../reduce/static.js";
import type { Scanner } from "../scanner.js";
export declare const parseDivisor: (s: DynamicState) => void;
export type parseDivisor<s extends StaticState, unscanned extends string> = Scanner.shiftUntilNextTerminator<unscanned> extends Scanner.shiftResult<infer scanned, infer nextUnscanned> ? tryParseWellFormedInteger<scanned, writeInvalidDivisorMessage<scanned>> extends infer divisor ? divisor extends number ? divisor extends 0 ? error<writeInvalidDivisorMessage<0>> : state.setRoot<s, [
    s["root"],
    "%",
    `${divisor}`
], nextUnscanned> : error<divisor & string> : never : never;
export declare const writeInvalidDivisorMessage: <divisor extends string | number>(divisor: divisor) => `% operator must be followed by a non-zero integer literal (was ${divisor})`;
export type writeInvalidDivisorMessage<divisor extends string | number> = `% operator must be followed by a non-zero integer literal (was ${divisor})`;
