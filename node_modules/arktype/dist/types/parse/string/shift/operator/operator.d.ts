import type { error } from "../../../../utils/generics.js";
import type { DynamicState } from "../../reduce/dynamic.js";
import type { state, StaticState } from "../../reduce/static.js";
import { Scanner } from "../scanner.js";
import { parseBound } from "./bounds.js";
import { parseDivisor } from "./divisor.js";
export declare const parseOperator: (s: DynamicState) => void;
export type parseOperator<s extends StaticState> = s["unscanned"] extends Scanner.shift<infer lookahead, infer unscanned> ? lookahead extends "[" ? unscanned extends Scanner.shift<"]", infer nextUnscanned> ? state.setRoot<s, [s["root"], "[]"], nextUnscanned> : error<incompleteArrayTokenMessage> : lookahead extends Scanner.BranchToken ? state.reduceBranch<s, lookahead, unscanned> : lookahead extends ")" ? state.finalizeGroup<s, unscanned> : lookahead extends Scanner.ComparatorStartChar ? parseBound<s, lookahead, unscanned> : lookahead extends "%" ? parseDivisor<s, unscanned> : lookahead extends " " ? parseOperator<state.scanTo<s, unscanned>> : error<writeUnexpectedCharacterMessage<lookahead>> : state.finalize<s>;
export declare const writeUnexpectedCharacterMessage: <char extends string>(char: char) => `Unexpected character '${char}'`;
type writeUnexpectedCharacterMessage<char extends string> = `Unexpected character '${char}'`;
export declare const incompleteArrayTokenMessage = "Missing expected ']'";
type incompleteArrayTokenMessage = typeof incompleteArrayTokenMessage;
export {};
