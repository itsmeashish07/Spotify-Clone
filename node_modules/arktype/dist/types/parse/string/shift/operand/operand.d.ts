import type { error, stringKeyOf } from "../../../../utils/generics.js";
import type { DynamicState } from "../../reduce/dynamic.js";
import type { state, StaticState } from "../../reduce/static.js";
import type { Scanner } from "../scanner.js";
import type { EnclosingChar } from "./enclosed.js";
import { parseEnclosed } from "./enclosed.js";
import { parseUnenclosed } from "./unenclosed.js";
export declare const parseOperand: (s: DynamicState) => void;
export type parseOperand<s extends StaticState, $> = s["unscanned"] extends Scanner.shift<infer lookahead, infer unscanned> ? lookahead extends "(" ? state.reduceGroupOpen<s, unscanned> : lookahead extends EnclosingChar ? parseEnclosed<s, lookahead, unscanned> : lookahead extends " " ? parseOperand<state.scanTo<s, unscanned>, $> : parseUnenclosed<s, $> : error<`${s["scanned"]}${stringKeyOf<$>}`>;
