import type { error, tailOfString } from "../../../../utils/generics.js";
import type { DynamicState } from "../../reduce/dynamic.js";
import type { state, StaticState } from "../../reduce/static.js";
import type { Scanner } from "../scanner.js";
export type StringLiteral<Text extends string = string> = DoubleQuotedStringLiteral<Text> | SingleQuotedStringLiteral<Text>;
export type DoubleQuotedStringLiteral<Text extends string = string> = `"${Text}"`;
export type SingleQuotedStringLiteral<Text extends string = string> = `'${Text}'`;
export declare const parseEnclosed: (s: DynamicState, enclosing: EnclosingChar) => undefined;
export type parseEnclosed<s extends StaticState, enclosing extends EnclosingChar, unscanned extends string> = Scanner.shiftUntil<unscanned, enclosing> extends Scanner.shiftResult<infer scanned, infer nextUnscanned> ? nextUnscanned extends "" ? error<writeUnterminatedEnclosedMessage<scanned, enclosing>> : state.setRoot<s, `${enclosing}${scanned}${enclosing}`, tailOfString<nextUnscanned>> : never;
export declare const enclosingChar: {
    "'": number;
    '"': number;
    "/": number;
};
export type EnclosingChar = keyof typeof enclosingChar;
declare const enclosingCharDescriptions: {
    readonly '"': "double-quote";
    readonly "'": "single-quote";
    readonly "/": "forward slash";
};
type enclosingCharDescriptions = typeof enclosingCharDescriptions;
export declare const writeUnterminatedEnclosedMessage: <fragment extends string, enclosing extends "/" | "'" | "\"">(fragment: fragment, enclosing: enclosing) => `${enclosing}${fragment} requires a closing ${{
    readonly '"': "double-quote";
    readonly "'": "single-quote";
    readonly "/": "forward slash";
}[enclosing]}`;
type writeUnterminatedEnclosedMessage<fragment extends string, enclosing extends EnclosingChar> = `${enclosing}${fragment} requires a closing ${enclosingCharDescriptions[enclosing]}`;
export {};
