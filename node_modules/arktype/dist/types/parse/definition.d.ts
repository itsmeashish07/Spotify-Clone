import type { Node } from "../nodes/node.js";
import type { Type } from "../scopes/type.js";
import type { Primitive } from "../utils/domains.js";
import { domainOf } from "../utils/domains.js";
import type { Dict, evaluate, isAny, isUnknown, List, stringKeyOf } from "../utils/generics.js";
import { objectKindOf } from "../utils/objectKinds.js";
import type { Path } from "../utils/paths.js";
import type { validateString } from "./ast/ast.js";
import type { inferTuple, TupleExpression, validateTupleExpression } from "./ast/tuple.js";
import type { inferRecord } from "./record.js";
import type { inferString } from "./string/string.js";
export type ParseContext = {
    type: Type;
    path: Path;
};
export declare const parseDefinition: (def: unknown, ctx: ParseContext) => Node;
export type inferDefinition<def, $> = isAny<def> extends true ? never : def extends Infer<infer t> | InferredThunk<infer t> ? t : def extends string ? inferString<def, $> : def extends List ? inferTuple<def, $> : def extends RegExp ? string : def extends Dict ? inferRecord<def, $> : never;
export type validateDefinition<def, $> = [def] extends [(...args: any[]) => any] ? def : def extends Terminal ? def : def extends string ? validateString<def, $> : def extends TupleExpression ? validateTupleExpression<def, $> : def extends BadDefinitionType ? writeBadDefinitionTypeMessage<objectKindOf<def> extends string ? objectKindOf<def> : domainOf<def>> : isUnknown<def> extends true ? stringKeyOf<$> : evaluate<{
    [k in keyof def]: validateDefinition<def[k], $>;
}>;
export declare const as: unique symbol;
export type Infer<t> = {
    [as]?: t;
};
type InferredThunk<t = unknown> = () => Infer<t>;
type Terminal = RegExp | Infer<unknown> | InferredThunk;
type BadDefinitionType = Exclude<Primitive, string>;
export declare const writeBadDefinitionTypeMessage: <actual extends string>(actual: actual) => `Type definitions must be strings or objects (was ${actual})`;
type writeBadDefinitionTypeMessage<actual extends string> = `Type definitions must be strings or objects (was ${actual})`;
export {};
