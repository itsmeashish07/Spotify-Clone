import type { asIn, asOut } from "../../scopes/type.js";
import type { Problem, Problems } from "../../traverse/problems.js";
import type { CheckResult } from "../../traverse/traverse.js";
import type { inferDefinition, validateDefinition } from "../definition.js";
import type { PostfixParser, TupleExpression } from "./tuple.js";
export declare const parseMorphTuple: PostfixParser<"|>">;
export type validateMorphTuple<def extends TupleExpression, $> = readonly [
    _: validateDefinition<def[0], $>,
    _: "|>",
    _: Morph<asOut<inferDefinition<def[0], $>>, unknown>
];
export type Morph<i = any, o = unknown> = (In: i, problems: Problems) => o;
export type Out<o = unknown> = readonly ["|>", o];
export type ParsedMorph<i = any, o = unknown> = (In: i) => Out<o>;
export type inferMorph<inDef, morph, $> = morph extends Morph ? (In: asIn<inferDefinition<inDef, $>>) => Out<inferMorphOut<ReturnType<morph>>> : never;
type inferMorphOut<out> = [out] extends [CheckResult<infer t>] ? t : Exclude<out, Problem>;
export declare const writeMalformedMorphExpressionMessage: (value: unknown) => string;
export {};
