import type { asIn } from "../../scopes/type.js";
import type { domainOf } from "../../utils/domains.js";
import type { equals, error, extractValues, isAny, optionalKeyOf, requiredKeyOf } from "../../utils/generics.js";
import type { objectKindOf } from "../../utils/objectKinds.js";
export type inferUnion<l, r> = isAny<l | r> extends true ? any : [l] extends [never] ? r : [r] extends [never] ? l : [asIn<l>, asIn<r>] extends [infer lIn, infer rIn] ? [equals<l, lIn>, equals<r, rIn>] extends [true, true] ? l | r : discriminatable<lIn, rIn> extends true ? l | r : error<undiscriminatableMorphUnionMessage> : never;
type discriminatable<l, r> = discriminatableRecurse<l, r, []> extends never ? false : true;
type discriminatableRecurse<l, r, path extends string[]> = path["length"] extends 10 ? never : l & r extends never ? path : domainOf<l> & domainOf<r> extends never ? path : objectKindOf<l> & objectKindOf<r> extends never ? path : [objectKindOf<l>, objectKindOf<r>] extends ["Object", "Object"] ? extractValues<{
    [k in keyof l as k extends optionalKeyOf<l> ? never : k]: k extends requiredKeyOf<r> ? discriminatableRecurse<l[k], r[k], [
        ...path,
        k & string
    ]> & {
        _: l;
    } : never;
}, string[]> : never;
export declare const writeUndiscriminatableMorphUnionMessage: <path extends string>(path: path) => string;
type undiscriminatableMorphUnionMessage = `A union including one or more morphs must be discriminatable`;
export {};
