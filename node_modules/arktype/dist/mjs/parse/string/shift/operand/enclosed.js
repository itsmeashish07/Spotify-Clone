import { getRegex } from "../../../../nodes/rules/regex.js";
export const parseEnclosed = (s, enclosing)=>{
    const token = s.scanner.shiftUntil(untilLookaheadIsClosing[enclosing]);
    if (s.scanner.lookahead === "") {
        return s.error(writeUnterminatedEnclosedMessage(token, enclosing));
    }
    // Shift the scanner one additional time for the second enclosing token
    if (s.scanner.shift() === "/") {
        // Cache the regex instance to throw right way if its invalid
        getRegex(token);
        s.setRoot({
            string: {
                regex: token
            }
        });
    } else {
        s.setRoot({
            string: {
                value: token
            }
        });
    }
};
export const enclosingChar = {
    "'": 1,
    '"': 1,
    "/": 1
};
const untilLookaheadIsClosing = {
    "'": (scanner)=>scanner.lookahead === `'`,
    '"': (scanner)=>scanner.lookahead === `"`,
    "/": (scanner)=>scanner.lookahead === `/`
};
const enclosingCharDescriptions = {
    '"': "double-quote",
    "'": "single-quote",
    "/": "forward slash"
};
export const writeUnterminatedEnclosedMessage = (fragment, enclosing)=>`${enclosing}${fragment} requires a closing ${enclosingCharDescriptions[enclosing]}`;
