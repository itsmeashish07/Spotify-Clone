function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
export class Scanner {
    /** Get lookahead and advance scanner by one */ shift() {
        return this.chars[this.i++] ?? "";
    }
    get lookahead() {
        return this.chars[this.i] ?? "";
    }
    shiftUntil(condition) {
        let shifted = "";
        while(this.lookahead){
            if (condition(this, shifted)) {
                if (shifted[shifted.length - 1] === Scanner.escapeToken) {
                    shifted = shifted.slice(0, -1);
                } else {
                    break;
                }
            }
            shifted += this.shift();
        }
        return shifted;
    }
    shiftUntilNextTerminator() {
        this.shiftUntil(Scanner.lookaheadIsNotWhitespace);
        return this.shiftUntil(Scanner.lookaheadIsTerminator);
    }
    get unscanned() {
        return this.chars.slice(this.i, this.chars.length).join("");
    }
    lookaheadIs(char) {
        return this.lookahead === char;
    }
    lookaheadIsIn(tokens) {
        return this.lookahead in tokens;
    }
    constructor(def){
        _defineProperty(this, "chars", void 0);
        _defineProperty(this, "i", void 0);
        _defineProperty(this, "finalized", false);
        this.chars = [
            ...def
        ];
        this.i = 0;
    }
}
(function(Scanner) {
    var lookaheadIsTerminator = Scanner.lookaheadIsTerminator = (scanner)=>scanner.lookahead in terminatingChars;
    var lookaheadIsNotWhitespace = Scanner.lookaheadIsNotWhitespace = (scanner)=>scanner.lookahead !== whiteSpaceToken;
    var comparatorStartChars = Scanner.comparatorStartChars = {
        "<": true,
        ">": true,
        "=": true
    };
    var terminatingChars = Scanner.terminatingChars = {
        ...comparatorStartChars,
        "|": true,
        "&": true,
        ")": true,
        "[": true,
        "%": true,
        " ": true
    };
    var comparators = Scanner.comparators = {
        "<": true,
        ">": true,
        "<=": true,
        ">=": true,
        "==": true
    };
    var oneCharComparators = Scanner.oneCharComparators = {
        "<": true,
        ">": true
    };
    var comparatorDescriptions = Scanner.comparatorDescriptions = {
        "<": "less than",
        ">": "more than",
        "<=": "at most",
        ">=": "at least",
        "==": "exactly"
    };
    var invertedComparators = Scanner.invertedComparators = {
        "<": ">",
        ">": "<",
        "<=": ">=",
        ">=": "<=",
        "==": "=="
    };
    var branchTokens = Scanner.branchTokens = {
        "|": true,
        "&": true
    };
    var escapeToken = Scanner.escapeToken = "\\";
    var whiteSpaceToken = Scanner.whiteSpaceToken = " ";
})(Scanner || (Scanner = {}));
