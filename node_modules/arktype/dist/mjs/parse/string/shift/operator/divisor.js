import { objectKeysOf } from "../../../../utils/generics.js";
import { tryParseWellFormedInteger } from "../../../../utils/numericLiterals.js";
import { writeIndivisibleMessage } from "../../../ast/divisor.js";
export const parseDivisor = (s)=>{
    const divisorToken = s.scanner.shiftUntilNextTerminator();
    const divisor = tryParseWellFormedInteger(divisorToken, writeInvalidDivisorMessage(divisorToken));
    if (divisor === 0) {
        s.error(writeInvalidDivisorMessage(0));
    }
    const rootDomains = objectKeysOf(s.resolveRoot());
    if (rootDomains.length === 1 && rootDomains[0] === "number") {
        s.intersect({
            number: {
                divisor
            }
        });
    } else {
        s.error(writeIndivisibleMessage(s.rootToString()));
    }
};
export const writeInvalidDivisorMessage = (divisor)=>`% operator must be followed by a non-zero integer literal (was ${divisor})`;
