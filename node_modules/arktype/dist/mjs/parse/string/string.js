import { toArrayNode } from "../../nodes/node.js";
import { DynamicState } from "./reduce/dynamic.js";
import { parseOperand } from "./shift/operand/operand.js";
import { parseOperator } from "./shift/operator/operator.js";
export const parseString = (def, ctx)=>ctx.type.scope.parseCache.get(def) ?? ctx.type.scope.parseCache.set(def, maybeNaiveParse(def, ctx) ?? fullStringParse(def, ctx));
export const maybeNaiveParse = (def, ctx)=>{
    if (ctx.type.scope.addParsedReferenceIfResolvable(def, ctx)) {
        return def;
    }
    if (def.endsWith("[]")) {
        const elementDef = def.slice(0, -2);
        if (ctx.type.scope.addParsedReferenceIfResolvable(def, ctx)) {
            return toArrayNode(elementDef);
        }
    }
};
export const fullStringParse = (def, ctx)=>{
    const s = new DynamicState(def, ctx);
    parseOperand(s);
    return loop(s);
};
const loop = (s)=>{
    while(!s.scanner.finalized){
        next(s);
    }
    return s.ejectFinalizedRoot();
};
const next = (s)=>s.hasRoot() ? parseOperator(s) : parseOperand(s);
