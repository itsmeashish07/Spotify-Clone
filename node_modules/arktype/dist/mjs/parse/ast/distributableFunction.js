import { hasDomain } from "../../utils/domains.js";
import { throwParseError } from "../../utils/errors.js";
import { objectKeysOf } from "../../utils/generics.js";
import { stringify } from "../../utils/serialize.js";
export const writeMalformedDistributableFunctionMessage = (def)=>`Expected a Function or Record<Domain, Function> operand (${stringify(def)} was invalid)`;
export const distributeFunctionToNode = (distributableFunction, node, ctx, ruleKey)=>{
    const domains = objectKeysOf(node);
    if (!hasDomain(distributableFunction, "object")) {
        return throwParseError(writeMalformedDistributableFunctionMessage(distributableFunction));
    }
    const distributed = {};
    if (typeof distributableFunction === "function") {
        const domainFunction = {
            [ruleKey]: distributableFunction
        };
        for (const domain of domains){
            distributed[domain] = domainFunction;
        }
    } else {
        for (const domain of domains){
            if (distributableFunction[domain] === undefined) {
                continue;
            }
            const functionInDomain = {
                [ruleKey]: distributableFunction[domain]
            };
            if (typeof functionInDomain[ruleKey] !== "function") {
                return throwParseError(writeMalformedDistributableFunctionMessage(functionInDomain));
            }
            distributed[domain] = functionInDomain;
        }
    }
    return distributed;
};
