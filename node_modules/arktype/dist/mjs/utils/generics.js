import { hasDomain } from "./domains.js";
export const asConst = (t)=>t;
export const isKeyOf = (k, obj)=>k in obj;
export const entriesOf = (o)=>Object.entries(o);
export const objectKeysOf = (o)=>Object.keys(o);
/** Mimics output of TS's keyof operator at runtime */ export const prototypeKeysOf = (value)=>{
    const result = [];
    while(value !== Object.prototype && value !== null && value !== undefined){
        for (const k of Object.getOwnPropertyNames(value)){
            if (!result.includes(k)) {
                result.push(k);
            }
        }
        for (const symbol of Object.getOwnPropertySymbols(value)){
            if (!result.includes(symbol)) {
                result.push(symbol);
            }
        }
        value = Object.getPrototypeOf(value);
    }
    return result;
};
export const hasKey = (o, k)=>{
    const valueAtKey = o?.[k];
    return valueAtKey !== undefined && valueAtKey !== null;
};
export const hasSingleKey = (o, k)=>k in o && Object.keys(o).length === 1;
export const keyCount = (o)=>Object.keys(o).length;
export const hasKeys = (value)=>hasDomain(value, "object") ? Object.keys(value).length !== 0 : false;
const id = Symbol("id");
export const nominal = (o, name)=>Object.assign(o, {
        [id]: name
    });
export const getNominalId = (data)=>hasDomain(data, "object") && id in data ? data[id] : undefined;
export const hasNominalId = (data, name)=>getNominalId(data) === name;
export const listFrom = (data)=>Array.isArray(data) ? data : [
        data
    ];
