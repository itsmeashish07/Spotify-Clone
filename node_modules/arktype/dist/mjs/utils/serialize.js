import { domainOf } from "./domains.js";
import { isKeyOf } from "./generics.js";
import { tryParseWellFormedBigint, tryParseWellFormedNumber } from "./numericLiterals.js";
export const snapshot = (data, opts = {})=>serializeRecurse(data, opts, []);
export const stringify = (data, indent)=>{
    switch(domainOf(data)){
        case "object":
            return JSON.stringify(serializeRecurse(data, stringifyOpts, []), null, indent);
        case "symbol":
            return stringifyOpts.onSymbol(data);
        default:
            return serializePrimitive(data);
    }
};
const stringifyOpts = {
    onCycle: ()=>"(cycle)",
    onSymbol: (v)=>`(symbol${v.description && ` ${v.description}`})`,
    onFunction: (v)=>`(function${v.name && ` ${v.name}`})`
};
const serializeRecurse = (data, context, seen)=>{
    switch(domainOf(data)){
        case "object":
            if (typeof data === "function") {
                return stringifyOpts.onFunction(data);
            }
            if (seen.includes(data)) {
                return "(cycle)";
            }
            const nextSeen = [
                ...seen,
                data
            ];
            if (Array.isArray(data)) {
                return data.map((item)=>serializeRecurse(item, context, nextSeen));
            }
            const result = {};
            for(const k in data){
                result[k] = serializeRecurse(data[k], context, nextSeen);
            }
            return result;
        case "symbol":
            return stringifyOpts.onSymbol(data);
        case "bigint":
            return `${data}n`;
        case "undefined":
            return "undefined";
        default:
            return data;
    }
};
export const serializePrimitive = (value)=>typeof value === "string" ? `'${value}'` : typeof value === "bigint" ? `${value}n` : `${value}`;
export const deserializePrimitive = (serialized)=>isKeyOf(serialized, serializedKeywords) ? serializedKeywords[serialized] : serialized[0] === "'" ? serialized.slice(1, -1) : tryParseWellFormedBigint(serialized) ?? tryParseWellFormedNumber(serialized, true);
const serializedKeywords = {
    true: true,
    false: false,
    undefined,
    null: null
};
