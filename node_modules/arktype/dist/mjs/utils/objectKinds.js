import { domainOf } from "./domains.js";
import { isKeyOf } from "./generics.js";
// Built-in object constructors based on a subset of:
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects
export const defaultObjectKinds = {
    Array,
    Date,
    Error,
    Function,
    Map,
    RegExp,
    Set,
    Object,
    String,
    Number,
    Boolean,
    WeakMap,
    WeakSet,
    Promise
};
export const objectKindOf = (data, kinds)=>{
    if (domainOf(data) !== "object") {
        return undefined;
    }
    const kindSet = kinds ?? defaultObjectKinds;
    let prototype = Object.getPrototypeOf(data);
    while(prototype?.constructor && (!kindSet[prototype.constructor.name] || !(data instanceof kindSet[prototype.constructor.name]))){
        prototype = Object.getPrototypeOf(prototype);
    }
    return prototype?.constructor?.name;
};
export const hasObjectKind = (data, kind, kinds)=>objectKindOf(data, kinds) === kind;
export const isArray = (data)=>Array.isArray(data);
/** Each defaultObjectKind's completion for the phrase "Must be _____" */ export const objectKindDescriptions = {
    Object: "an object",
    Array: "an array",
    Function: "a function",
    Date: "a Date",
    RegExp: "a RegExp",
    Error: "an Error",
    Map: "a Map",
    Set: "a Set",
    String: "a String object",
    Number: "a Number object",
    Boolean: "a Boolean object",
    Promise: "a Promise",
    WeakMap: "a WeakMap",
    WeakSet: "a WeakSet"
};
// this will only return an object kind if it's the root constructor
// example TypeError would return undefined not 'Error'
export const getExactConstructorObjectKind = (constructor)=>{
    const constructorName = Object(constructor).name;
    return constructorName && isKeyOf(constructorName, defaultObjectKinds) && defaultObjectKinds[constructorName] === constructor ? constructorName : undefined;
};
